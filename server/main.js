(function () {
    'use strict';

    Object.defineProperty(exports, "__esModule", { value: true });
    const tslib_1 = require("tslib");
    const fs = tslib_1.__importStar(require("fs"));
    const txt = fs
        .readFileSync('server/bin/readme.txt', 'ascii')
        .toString()
        .split('\n');
    let files = [];
    const READING_FREE = 0;
    const READING_START = 1;
    const READING_DESC = 2;
    let curState = READING_FREE;
    function readDescLine(line) {
        if (line[7] != ' ') {
            let start;
            let end;
            let units;
            let label;
            if (line.charAt(4) == '-') {
                start = Number(line.substring(1, 4)) - 1;
                end = Number(line.substring(5, 8)) - 1;
            }
            else
                start = end = Number(line.substring(5, 8)) - 1;
            if (line.substring(17, 20) == '---') {
                units = '---';
                label = line.substring(23, 33).replace(/\s+/g, '');
            }
            else {
                units = line.substring(15, 24).replace(/\s+/g, '');
                label = line.substring(24, 33).replace(/\s+/g, '');
            }
            let l = {
                start: start,
                end: end,
                format: line.substring(8, 15).replace(/\s+/g, ''),
                units: units,
                label: label,
                explanations: line.substring(33, line.length - 1)
            };
            files[files.length - 1].header.lines.push(l);
        }
        else {
            files[files.length - 1].header.lines[files[files.length - 1].header.lines.length - 1].explanations += line.substring(33, line.length - 1);
        }
    }
    let skip = 0;
    txt.forEach((line) => {
        switch (curState) {
            case READING_FREE:
                if (line.startsWith('Byte-by-byte Description of file:')) {
                    curState = READING_START;
                    skip = 0;
                    files.push({
                        header: { name: line.split(' ')[4], lines: [] },
                        data: []
                    });
                }
                break;
            case READING_START:
                skip++;
                if (skip == 3)
                    curState = READING_DESC;
                break;
            case READING_DESC:
                if (line.startsWith('----------')) {
                    curState = READING_FREE;
                }
                else
                    readDescLine(line);
                break;
        }
    });
    files.forEach((f) => {
        const fr = fs
            .readFileSync('server/bin/' + f.header.name, 'binary')
            .toString()
            .split('\n');
        let j = 0;
        fr.forEach((line) => {
            if (line == '')
                return;
            f.data[j] = {};
            f.header.lines.forEach((p) => {
                f.data[j][p.label] = line.substring(p.start, p.end + 1);
            });
            j++;
        });
    });
    fs.writeFileSync('out.json', JSON.stringify(files));

})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsic3JjL21haW4udHMiXSwic291cmNlc0NvbnRlbnQiOltudWxsXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7SUFBQSxNQUF5QixFQUFBLEdBQUEsT0FBQSxDQUFBLFlBQUEsQ0FBQSxPQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsQ0FBQTtJQUd6QixNQUFNLEdBQUcsR0FBRyxFQUFFO0lBQ1gsS0FBQSxZQUFZLENBQUMsdUJBQXVCLEVBQUUsT0FBTyxDQUFDO0lBQzlDLEtBQUEsUUFBUSxFQUFFO1NBQ1YsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBeUJmLElBQUksS0FBSyxHQUFrQixFQUFFLENBQUM7SUFFOUIsTUFBTSxZQUFZLEdBQUcsQ0FBQyxDQUFDO0lBQ3ZCLE1BQU0sYUFBYSxHQUFHLENBQUMsQ0FBQztJQUN4QixNQUFNLFlBQVksR0FBRyxDQUFDLENBQUM7SUFFdkIsSUFBSSxRQUFRLEdBQUcsWUFBWSxDQUFDO0lBRzVCLFNBQVMsWUFBWSxDQUFDLElBQVksRUFBQTtJQUNoQyxJQUFBLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsRUFBRTtJQUNsQixRQUFBLElBQUksS0FBYSxDQUFDO0lBQ2xCLFFBQUEsSUFBSSxHQUFXLENBQUM7SUFDaEIsUUFBQSxJQUFJLEtBQWEsQ0FBQztJQUNsQixRQUFBLElBQUksS0FBYSxDQUFDO1lBRWxCLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLEVBQUU7SUFDekIsWUFBQSxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3pDLFlBQUEsR0FBRyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUN4Qzs7SUFBTSxZQUFBLEtBQUss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
